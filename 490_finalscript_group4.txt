create database if not exists salon_app;

use salon_app;

/*
 * 
 * 
 * 
 */


/* 
 * Users sign up on website and are later split into different roles: 
 * Customers, Business, or Employee.
 * Primary Key: uid (user_id)
 * */
create table if not exists users (
	uid int auto_increment not null,
	first_name varchar(128) not null,
	last_name varchar (128) not null,
	phone varchar(11),
	created_at timestamp default current_timestamp(),
	updated_at datetime default current_timestamp() on update current_timestamp(),
	constraint pk_user primary key (uid)
);



/* 
 * The different roles a user can be: Customer, Business Owner, or Employee.
 * Primary Key: rid (role_id)
 * */
create table if not exists roles (
	rid int auto_increment not null,
	name varchar(128),
	created_at timestamp default current_timestamp(),
	updated_at datetime default current_timestamp() on update current_timestamp(),
	primary key (rid)
);


/* 
 * Table that keeps track of the role of every signed up user of the site.
 * Primary Key: uid (user_id)
 * Foreign Keys: rid (role_id [from roles]), uid(user_id[from users])
 * */
create table if not exists users_roles (
	uid int not null,
	rid int not null,
	created_at timestamp default current_timestamp(),
	updated_at datetime default current_timestamp() on update current_timestamp(),
	primary key (uid),
	foreign key (uid) references users(uid),
	foreign key (rid) references roles(rid)
);

insert into roles (name)
values
	("customer"),
	("business"),
	("employee");




/* 
 * Customer information recorded into database. Each customer has unique identification.
 * Primary Key: cid (customer_id)
 * Foreign Key: uid (user_id [from users])
 * */
create table if not exists customers (
	cid int auto_increment not null,
	uid int not null,
	created_at timestamp default current_timestamp(),
	updated_at datetime default current_timestamp() on update current_timestamp(),
	constraint pk_cust primary key (cid, uid),
	foreign key (uid) references users(uid)
);  

/* 
 * Address of the Businesses Signed Up
 * Primary key: aid(address_id)
 * */
create table if not exists addresses (
	aid int auto_increment not null,
	street varchar(255),
	city varchar(255),
	state varchar(255),
	country varchar(255),
	zip_code varchar(255),
	created_at timestamp default current_timestamp(),
	updated_at datetime default current_timestamp() on update current_timestamp(),
	primary key (aid)
);


/* 
 * Information of Signed Up Businesses Recorded
 * Keep track if Business still opened or not (status)
 * Primary Keys: bid (business_id), uid(user_id)
 * Foreign Keys: uid (user_id[from users]), aid(address_id[from addresses])
 * */
create table if not exists business (
	bid int auto_increment not null,
	uid int not null,
	name varchar(255) not null,
	aid int not null,
	status bool default false,
	created_at timestamp default current_timestamp(),
	updated_at datetime default current_timestamp() on update current_timestamp(),
	constraint pk_business primary key (bid),
	foreign key (uid) references users(uid),
	foreign key (aid) references addresses(aid)
);


/* 
 * Information stored of every worker for each business on record.
 * Primary Keys: eid(employee_id), uid(user_id)
 * Foreign Keys: bid(business_id), uid(user_id)
 * */
create table if not exists employee (
	eid int auto_increment not null,
	uid int not null,
	bid int,
	created_at timestamp default current_timestamp(),
	updated_at datetime default current_timestamp() on update current_timestamp(),
	constraint pk_employee primary key (eid),
	foreign key (uid) references users(uid),
	foreign key (bid) references business(bid)
);


/* 
 * Recording data of the various skillsets that the salon barbers have to offer.
 * Primary Key: exp_id(Expertise ID)
 * */
create table if not exists expertise (
	exp_id int auto_increment not null,
	expertise varchar(128) not null,
	created_at timestamp default current_timestamp(),
	updated_at datetime default current_timestamp() on update current_timestamp(),
	primary key (exp_id)
);


/* 
 * Recording what specific departments that employees can specialize in.
 * Primary Keys: eid(employee_id), exp_id(expertise_id)
 * Foreign Keys: eid(employee_id [from employee]), 
 * exp_id(expertise_id[from expertise])
 * */
create table if not exists employee_expertise (
	eid int not null,
	exp_id int not null,
	created_at timestamp default current_timestamp(),
	updated_at datetime default current_timestamp() on update current_timestamp(),
	constraint pk_employee_expertise primary key (eid, exp_id),
	foreign key (eid) references employee(eid),
	foreign key (exp_id) references expertise(exp_id)
);


/* 
 * Keeps track of all Reviews and Their Replies left on Web App.
 * Parent_ID used to distinguish between original posts and 
 * replies to an original post. 
 * Primary Key: id (review_id)
 * Foreign Keys: parent_id (refers to id [from reviews]), 
 * bid(business_id [from business]), 
 * eid(employee_id[from employee]) 
 * */
create table if not exists reviews (
	id int auto_increment not null,
	uid int not null,
	bid int,
	eid int,
	parent_id int,
	comments text,
	created_at timestamp default current_timestamp(),
	updated_at datetime default current_timestamp() on update current_timestamp(),
	primary key (id),
	foreign key (parent_id) references reviews(id),
	foreign key (bid) references business(bid),
	foreign key (eid) references employee(eid),
	check (
        (bid is not null and eid is null) or
        (bid is null and eid is not null)
    )
);

/* 
 * Keeps record of the scheduled time each employee works
 * Primary Key: sched_id(schedule_id)
 * Foreign Key: eid(employee_id [from employee])
 * */
create table if not exists schedule (
	sched_id int auto_increment not null,
	eid int not null,
	start_time timestamp,
	finish_time timestamp,
	created_at timestamp default current_timestamp(),
	updated_at datetime default current_timestamp() on update current_timestamp(),
	primary key (sched_id),
	foreign key (eid) references employee(eid)
);


/* 
 * The information stored for each service offered by a business.
 * Primary Key: sid (service_id) 
 * Foreign Key: bid (business_id [from business])
 * */
create table if not exists services (
	sid int auto_increment not null,
	name varchar(255),
	price decimal(5,2),
	bid int not null,
	created_at timestamp default current_timestamp(),
	updated_at datetime default current_timestamp() on update current_timestamp(),
	primary key (sid),
	foreign key (bid) references business(bid)
);


/* 
 * Authentication Table: stores sensitive information 
 * to authenticate users signed up.
 * hash used to protect sensitive password information (64hex characters)
 * salt added to hash for extra security (random salts stored as hexadecimal)
 * Primary Key: uid (user_id)
 * Foreign Key: uid(user_id [from users])
 * */
create table if not exists authenticate(
    uid int not null,
    email varchar(255) not null,
    pw_hash char(64) not null,
    salt char(32) not null, 
    created_at timestamp default current_timestamp(),
    updated_at timestamp default current_timestamp() on update current_timestamp(),
    constraint pk_authenticate primary key(uid,email),
    foreign key(uid) references users(uid)
    );
	
-- products each business sells with their stock
create table if not exists products (
	pid int not null,																# primary key
	name varchar(255),																# name of product
	bid int not null,																# business selling product (foreign key business)
	price decimal(5,2),																# unit price of product
	stock int default 0,															# stock of product defaults to 0
	description varchar(500),														# description of product
	created_at timestamp default current_timestamp(),
	updated_at datetime default current_timestamp() on update current_timestamp(),
	primary key (pid),
	foreign key (bid) references business(bid)
);

-- stores individual cart item with amount of each product being purchased
create table if not exists cart (
	id int auto_increment not null,  												# primary key
	pid int not null, 																# product customer is buying (product is unique to business) (foreign key products pid)
	amount int default 1,															# how much of a product customer wants
	uid int not null, 																# who is buying product (foreign key users uid)
	created_at timestamp default current_timestamp(),
	updated_at datetime default current_timestamp() on update current_timestamp(),
	primary key (id),
	foreign key (pid) references products(pid),
	foreign key (uid) references users(uid)
);

-- stores appointments made by customers for each business and for which employee
create table if not exists appointments (
	aid int auto_increment not null, 												# primary key
	cid int not null, 																# customer making appointment (foreign key customers cid)
	eid int, 																		# employee customer wants to make appointment with (foreign key employee eid)
	sid int not null, 																# service customer wants to recieve at appointment (foreign key services sid)
	start_time timestamp not null,													# time customer should show up to appointment
	expected_end_time timestamp not null,											# time service should end
	end_time timestamp on update current_timestamp(),	
	notes text,																		# time service does end
	created_at timestamp default current_timestamp(),								
	updated_at datetime default current_timestamp() on update current_timestamp(),
	primary key (aid),
	foreign key (cid) references customers(cid),
	foreign key (eid) references employee(eid),
	foreign key (sid) references services(sid)
);

-- the service a customer has booked an appointment for
create table if not exists services_booked (
	id int auto_increment  not null,												# primary key
	aid int not null,																# appointment (foreign key appointments aid)
	sid int not null,																# service booked (foreign key services sid)
	created_at timestamp default current_timestamp(),
	updated_at datetime default current_timestamp() on update current_timestamp(),
	primary key (id),
	foreign key (aid) references appointments(aid),
	foreign key (sid) references services(sid)
);


-- the service a customer has attended an appointment for
create table if not exists services_provided (
	id int auto_increment not null,													# primary key
	aid int not null,																# appointment (foreign key appointments aid)
	sid int not null,																# service provided (foreign key services sid)
	created_at timestamp default current_timestamp(),								
	updated_at datetime default current_timestamp() on update current_timestamp(),
	primary key (id),
	foreign key (aid) references appointments(aid),
	foreign key (sid) references services(sid)
);

-- each row is a loyalty program a business has implemented
create table if not exists loyalty_programs (
	lid int auto_increment not null,																# primay key
	points_thresh int,																# points needed to qualify for loyalty program
	bid int,																		# business implementing program (foreign key business bid)
	sid int,																		# service being traded for with points (foreign key services sid)
	pid int,																		# product being traded for with points (foreign key products pid)
	created_at timestamp default current_timestamp(),								
	updated_at datetime default current_timestamp() on update current_timestamp(),
	primary key (lid),
	foreign key (bid) references business(bid),
	foreign key (sid) references services(sid),
	foreign key (pid) references products(pid),
	check (																			# loyalty program can being traded for product or service but not both
        (sid is not null and pid is null) or										
        (sid is null and pid is not null)
    )
);

-- track how many points a customer has for a particular business
create table if not exists loyalty_points (
	cid int not null,																# composite primary key (foreign key customers cid)
	bid int not null,																# composite primary key (foreign key business bid)
	points int default 0,															# total points defaults to 0 points
	created_at timestamp default current_timestamp(),
	updated_at datetime default current_timestamp() on update current_timestamp(),
	constraint id primary key (bid,cid),
	foreign key (cid) references customers(cid),
	foreign key (bid) references business(bid)
);

-- track loyalty program transactions made by customers
create table if not exists loyalty_transactions (
	id int auto_increment not null,																# primary key
	cid int not null,																# customer that made transaction (foreign key customers cid)
	lid int not null,																# loyalty program that was used for transaction (foreign key loyalty_programs lid)
	created_at timestamp default current_timestamp(),
	updated_at datetime default current_timestamp() on update current_timestamp(),
	primary key (id),
	foreign key (cid) references customers(cid),
	foreign key (lid) references loyalty_programs(lid)
);

-- track what type of emails each user wants to recieve
-- track what type of emails each user wants to recieve
create table if not exists email_subscription (
	uid int not null,	
	cid int,																				# primary key (foreign key users uid)
	promotion bool default true,													# does customer want to recieve emails for promotions
	appointment bool default true,													# does customer want to recieve emails for appointments
	created_at timestamp default current_timestamp(),                               # cid can be null, not every user will be a client
	updated_at datetime default current_timestamp() on update current_timestamp(),
	primary key (uid),
	foreign key (uid) references users(uid), 
	foreign key (cid) references customers(cid) 
);
-- each row is a promotion a business has implemented
create table if not exists promotions (
	id int auto_increment not null,													# primary key
	bid int not null,																# business implementing promotion (foreign key business bid)
	discount decimal(5,3),															# discount
	service_discount bool,															# is discount being applied to a specific service/product (true) or to total price (false) 
	sid int,																		# if service_discount==true what service (foreign key services sid)
	pid int,																		# if service_discount==true what product (foreign key products pid)
	created_at timestamp default current_timestamp(),
	updated_at datetime default current_timestamp() on update current_timestamp(),
	primary key (id),
	foreign key (bid) references business(bid),
	foreign key (sid) references services(sid),
	foreign key (pid) references products(pid)
);

-- store user payment methods
create table if not exists payment_information (
	id int auto_increment not null,																# primary key
	uid int not null,																# user (foreign key users uid)
	payment_type varchar(128),														# payment type (credit, debit, etc)
	card_number varchar(128),														# card number
	created_at timestamp default current_timestamp(),								
	updated_at datetime default current_timestamp() on update current_timestamp(),
	primary key (id),
	foreign key (uid) references users(uid)
);

-- track changes made to tables
create table if not exists audit (
	id int auto_increment not null,													# primary key
	table_name varchar(128) not null,												# table that was changed
	record_id int not null,															# record of table that was changed
	action enum('insert', 'update', 'delete') not null,								# what type of change
	old_data json,																	# old data
	new_data json,																	# new data
	changed_at timestamp default current_timestamp(),								# When was change made
	changed_by varchar(128),														# Who made change
	primary key (id)
);





